const blogRouter = require("express").Router();
const logger = require("../utils/logger")
const Blog = require("../models/blogModel");
const User = require("../models/userModel")

blogRouter.get("/", async (request, response) => {
  const blogs = await Blog
    .find({})
    .populate("user", { username: 1, name: 1 })

    response.json(blogs)
});

blogRouter.get("/:id", async (request, response) => {
  const blog = await Blog.findById(request.params.id);
  if (blog) {
    response.json(blog);
  } else {
    response.status(404).end;
  }
});

blogRouter.post("/", async (request, response) => {
  const body = request.body;

  //Credit anancarv github
  const users = await User.find({})
  const randomUser = users[Math.floor(Math.random() * users.length)]
  logger.info(users)

  const blog = new Blog({
    title: body.title,
    author: body.author,
    url: body.url,
    likes: body.likes,
    user: randomUser._id,
  });

  const savedBlog = await blog.save();
  randomUser.blogs = randomUser.blogs.concat(savedBlog._id)
  await randomUser.save()
});

blogRouter.delete("/:id", async (request, response) => {
  await Blog.findByIdAndRemove(request.params.id)
  response.status(204).end()

  response.status(201).json(savedBlog.toJSON());
})

blogRouter.put("/:id", async (request, response) => {
  const blog = request.body

  const updatedBlog = await Blog.findByIdAndUpdate(request.params.id, blog, { new: true })
  updatedBlog
    ? response.status(200).json(updatedBlog.toJSON())
    : response.status(400).end()
})

module.exports = blogRouter;
